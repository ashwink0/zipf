[{"/Users/ashwin/Documents/GitHub/zipf/src/App.tsx":"1","/Users/ashwin/Documents/GitHub/zipf/src/util.ts":"2"},{"size":1499,"mtime":1608687123175,"results":"3","hashOfConfig":"4"},{"size":1150,"mtime":1608684368952,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1rd2p4s",{"filePath":"9","messages":"10","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ashwin/Documents/GitHub/zipf/src/App.tsx",["11","12","13","14","15"],"import React from 'react';\nimport {useState, useEffect} from \"react\";\nimport {\n\tLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, AreaChart, Area, ResponsiveContainer\n} from 'recharts';\nimport './App.css';\n\nimport {getData} from './util'\n\nlet data = getData('Hello my name is Ashwin. This is a sentence');\n\nfunction App() {\n\tconst [text, setText] = useState(\"\")\n\tconst [textData, setTextData] = useState([])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<div style={{flex: 1}}>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tvalue={text}\n\t\t\t\t\t\tonChange={e => setText(e.target.value)}\n\t\t\t\t\t\tstyle={{width: '90%', height: '200px', minWidth: '90%', minHeight: '200px',maxWidth: '400px', maxHeight: '400px'}}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<button onClick={() => {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tsetTextData(getData(text))\n\t\t\t\t\t}}>Graph Data\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{color: 'black', flex: 2, width: '50%', height: '35%'}}>\n\t\t\t\t\t\t<LineChart\n\t\t\t\t\t\t\twidth={700}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\tdata={textData}\n\t\t\t\t\t\t\tmargin={{\n\t\t\t\t\t\t\t\ttop: 5, right: 5, left: 5, bottom: 5,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\"/>\n\t\t\t\t\t\t\t<XAxis dataKey=\"name\" hide/>\n\t\t\t\t\t\t\t<YAxis/>\n\t\t\t\t\t\t\t<Tooltip/>\n\t\t\t\t\t\t\t<Legend/>\n\t\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"expected\" stroke=\"#8884d8\" activeDot={{r: 5}} dot={<div/>}/>\n\t\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"actual\" stroke=\"#FF0000\" activeDot={{r: 5}} dot={<div/>}/>\n\t\t\t\t\t\t</LineChart>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","/Users/ashwin/Documents/GitHub/zipf/src/util.ts",["16","17","18","19"],{"ruleId":"20","severity":1,"message":"21","line":2,"column":19,"nodeType":"22","messageId":"23","endLine":2,"endColumn":28},{"ruleId":"20","severity":1,"message":"24","line":4,"column":65,"nodeType":"22","messageId":"23","endLine":4,"endColumn":74},{"ruleId":"20","severity":1,"message":"25","line":4,"column":76,"nodeType":"22","messageId":"23","endLine":4,"endColumn":80},{"ruleId":"20","severity":1,"message":"26","line":4,"column":82,"nodeType":"22","messageId":"23","endLine":4,"endColumn":101},{"ruleId":"20","severity":1,"message":"27","line":10,"column":5,"nodeType":"22","messageId":"23","endLine":10,"endColumn":9},{"ruleId":"20","severity":1,"message":"28","line":1,"column":5,"nodeType":"22","messageId":"23","endLine":1,"endColumn":7},{"ruleId":"20","severity":1,"message":"29","line":2,"column":7,"nodeType":"22","messageId":"23","endLine":2,"endColumn":11},{"ruleId":"30","severity":1,"message":"31","line":6,"column":79,"nodeType":"32","messageId":"33","endLine":6,"endColumn":80,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":24,"column":39,"nodeType":"37","messageId":"38","endLine":24,"endColumn":41},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'AreaChart' is defined but never used.","'Area' is defined but never used.","'ResponsiveContainer' is defined but never used.","'data' is assigned a value but never used.","'fs' is assigned a value but never used.","'util' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["39","40"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"messageId":"41","fix":"42","desc":"43"},{"messageId":"44","fix":"45","desc":"46"},"removeEscape",{"range":"47","text":"48"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"49","text":"50"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[191,192],"",[191,191],"\\"]