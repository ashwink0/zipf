{"version":3,"sources":["util.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["require","getData","text","console","log","frequencies","data","pattern","toLowerCase","match","reduce","stats","word","hasOwnProperty","getWordFrequency","replace","sortable","item","push","sort","a","b","JSON","stringify","max","parseInt","length","retData","reverse","map","index","name","actual","expected","Math","round","App","useState","setText","textData","setTextData","className","style","flex","value","onChange","e","target","width","height","minWidth","minHeight","maxWidth","maxHeight","onClick","color","margin","top","right","left","bottom","strokeDasharray","dataKey","hide","type","stroke","activeDot","r","dot","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAASA,EAAQ,KACJA,EAAQ,KAEd,SAASC,EAAQC,GACvBC,QAAQC,IAAI,KACZ,IAAIC,EA6BL,SAA0BC,GACzB,IAAIC,EAAU,OAad,OAZUD,EAAKE,cACQC,MAAMF,GAGHG,QAAO,SAAUC,EAAmBC,GAM7D,OALID,EAAME,eAAeD,GACxBD,EAAMC,GAAQD,EAAMC,GAAQ,EAE5BD,EAAMC,GAAQ,EAERD,IACL,IA1CeG,CAAiBZ,EAAKa,QAAQ,YAAa,IAAIA,QAAQ,YAAa,KAElFC,EAAW,GAEf,IAAK,IAAIC,KAAQZ,EAChBW,EAASE,KAAK,CAACD,EAAMZ,EAAYY,KAGlCD,EAASG,MAAK,SAAUC,EAAQC,GAC/B,OAAOD,EAAE,GAAKC,EAAE,MAGjBlB,QAAQC,IAAIkB,KAAKC,UAAUP,IAE3B,IAAIQ,EAAaC,SAAST,EAASA,EAASU,OAAS,GAAG,IAEpDC,EAA+D,GASnE,OAPAX,EAASY,UAAUC,KAAI,SAACZ,EAAMa,GAC7B3B,QAAQC,IAAIa,GACZU,EAAQT,KAAK,CACZa,KAAMd,EAAK,GAAIe,OAAQf,EAAK,GAAIgB,SAAUC,KAAKC,MAAMX,GAAKM,EAAM,SAGlE3B,QAAQC,IAAIuB,GACLA,ECrBG1B,EAAQ,+CA8CJmC,MA5Cf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACPnC,EADO,KACDoC,EADC,OAEkBD,mBAAS,IAF3B,mBAEPE,EAFO,KAEGC,EAFH,KAId,OACC,qBAAKC,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,sBAAKC,MAAO,CAACC,KAAM,GAAnB,UACC,0BACCC,MAAO1C,EACP2C,SAAU,SAAAC,GAAC,OAAIR,EAAQQ,EAAEC,OAAOH,QAChCF,MAAO,CAACM,MAAO,MAAOC,OAAQ,QAASC,SAAU,MAAOC,UAAW,QAAQC,SAAU,QAASC,UAAW,WAG1G,wBAAQC,QAAS,WAEhBd,EAAYvC,EAAQC,KAFrB,2BAOD,qBAAKwC,MAAO,CAACa,MAAO,QAASZ,KAAM,EAAGK,MAAO,MAAOC,OAAQ,OAA5D,SACE,eAAC,IAAD,CACCD,MAAO,IACPC,OAAQ,IACR3C,KAAMiC,EACNiB,OAAQ,CACPC,IAAK,EAAGC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,GALrC,UAQC,cAAC,IAAD,CAAeC,gBAAgB,QAC/B,cAAC,IAAD,CAAOC,QAAQ,OAAOC,MAAI,IAC1B,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CAAMC,KAAK,WAAWF,QAAQ,WAAWG,OAAO,UAAUC,UAAW,CAACC,EAAG,GAAIC,IAAK,0BAClF,cAAC,IAAD,CAAMJ,KAAK,WAAWF,QAAQ,SAASG,OAAO,UAAUC,UAAW,CAACC,EAAG,GAAIC,IAAK,qCCjCxEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f0f7e2cb.chunk.js","sourcesContent":["let fs = require('fs');\nconst util = require(\"util\");\n\nexport function getData(text: string) {\n\tconsole.log('a')\n\tlet frequencies = getWordFrequency(text.replace(/\\r?\\n|\\r/g, '').replace(/\\r?\\'|\\r/g, ''))\n\n\tvar sortable = [];\n\t// @ts-ignore\n\tfor (var item in frequencies) {\n\t\tsortable.push([item, frequencies[item]]);\n\t}\n\n\tsortable.sort(function (a: any, b: any) {\n\t\treturn a[1] - b[1];\n\t});\n\n\tconsole.log(JSON.stringify(sortable))\n\n\tlet max: number= parseInt(sortable[sortable.length - 1][1]);\n\n\tlet retData: { name: string; actual: string; expected: number; }[]=[]\n\n\tsortable.reverse().map((item, index) => {\n\t\tconsole.log(item)\n\t\tretData.push({\n\t\t\tname: item[0], actual: item[1], expected: Math.round(max/(index+1))\n\t\t})\n\t})\n\tconsole.log(retData);\n\treturn retData;\n}\n\n\nfunction getWordFrequency(data: string) {\n\tvar pattern = /\\w+/g,\n\t\tstring = data.toLowerCase(),\n\t\tmatchedWords = string.match(pattern);\n\n\t// @ts-ignore\n\tvar counts = matchedWords.reduce(function (stats: Array<any>, word: number) {\n\t\tif (stats.hasOwnProperty(word)) {\n\t\t\tstats[word] = stats[word] + 1;\n\t\t} else {\n\t\t\tstats[word] = 1;\n\t\t}\n\t\treturn stats;\n\t}, {});\n\treturn counts\n}\n","import React from 'react';\nimport {useState, useEffect} from \"react\";\nimport {\n\tLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, AreaChart, Area, ResponsiveContainer\n} from 'recharts';\nimport './App.css';\n\nimport {getData} from './util'\n\nlet data = getData('Hello my name is Ashwin. This is a sentence');\n\nfunction App() {\n\tconst [text, setText] = useState(\"\")\n\tconst [textData, setTextData] = useState([])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<div style={{flex: 1}}>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tvalue={text}\n\t\t\t\t\t\tonChange={e => setText(e.target.value)}\n\t\t\t\t\t\tstyle={{width: '90%', height: '200px', minWidth: '90%', minHeight: '200px',maxWidth: '400px', maxHeight: '400px'}}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<button onClick={() => {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tsetTextData(getData(text))\n\t\t\t\t\t}}>Graph Data\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{color: 'black', flex: 2, width: '50%', height: '35%'}}>\n\t\t\t\t\t\t<LineChart\n\t\t\t\t\t\t\twidth={700}\n\t\t\t\t\t\t\theight={500}\n\t\t\t\t\t\t\tdata={textData}\n\t\t\t\t\t\t\tmargin={{\n\t\t\t\t\t\t\t\ttop: 5, right: 5, left: 5, bottom: 5,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\"/>\n\t\t\t\t\t\t\t<XAxis dataKey=\"name\" hide/>\n\t\t\t\t\t\t\t<YAxis/>\n\t\t\t\t\t\t\t<Tooltip/>\n\t\t\t\t\t\t\t<Legend/>\n\t\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"expected\" stroke=\"#8884d8\" activeDot={{r: 5}} dot={<div/>}/>\n\t\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"actual\" stroke=\"#FF0000\" activeDot={{r: 5}} dot={<div/>}/>\n\t\t\t\t\t\t</LineChart>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}